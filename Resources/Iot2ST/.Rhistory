prediction <- sapply(train_splitting, loquesea)
str(train)
prediction
loquesea <- function(train){
fit <- Arima(month_train, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[90]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(train_splitting, loquesea)
prediction
loquesea <- function(train){
fit <- Arima(train_days_ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[90]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(train_splitting, loquesea)
prediction
#8.3 Subset daily ####
train_daily <- train %>%
group_by(year,month,day,store) %>%
summarise(sales= sum(sales))
view(train_daily)
train_days_ts<- ts(train_daily$day,
frequency=365,
start=c(2013,1),
end=c(2017,364))
train_days_ts
loquesea <- function(train){
fit <- Arima(train_days_ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[90]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(train_splitting, loquesea)
prediction
loquesea <- function(train){
fit <- Arima(train_days_ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[90]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(train_splitting, loquesea)
loquesea <- function(train){
fit <- Arima(train_days_ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(train_splitting, loquesea)
prediction
loquesea <- function(train){
fit <- Arima(train, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(train_splitting, loquesea)
prediction
loquesea <- function(train){
fit <- Arima(train, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[90]
}
split <- c("store", "item")
train_splitting
fit <- Arima(trainsplitting$1.1, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
fit <- Arima(train_splitting$1.1, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
train_splitting$`1.1`
fit <- Arima(train_splitting$'1.1', order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
fit <- Arima(train_splitting[[1]], order=c(0,0,1), seasonal = c(0,0,1))
View(train_splitting)
View(v)
algo <- c()
a <- 1
algo <- c()
for (i in train_splitting){
algo <- cbind(algo,ts(i [, "sales"], frequency=365, start=c(2013,1), end=c(2017,365)))
print(a)
a <- a + 1
}
View(algo)
a <- 1
algo <- c()
for (i in train_splitting){
algo <- cbind(algo,ts(i[, "sales"], frequency=365, start=c(2013,1), end=c(2017,365)))
print(a)
a <- a + 1
}
algo <- vector()
for (i in train_splitting){
algo <- cbind(algo,ts(i[, "sales"], frequency=365, start=c(2013,1), end=c(2017,365)))
print(a)
a <- a + 1
}
a <- 1
algo <- vector()
for (i in train_splitting){
algo <- cbind(algo,ts(i[, "sales"], frequency=365, start=c(2013,1), end=c(2017,365)))
print(a)
a <- a + 1
}
algo <- c()
for (i in train_splitting){
algo <- cbind(algo,ts(i[, "sales"], frequency=365, start=c(2013,1), end=c(2017,365)))
print(a)
a <- a + 1
}
dim(algo)
View(algo)
a <- 1
algo <- list()
for (i in train_splitting){
algo[[i]] <- ts(i[, "sales"], frequency=365, start=c(2013,1), end=c(2017,365))
print(a)
a <- a + 1
}
for (i in train_splitting){}
for (i in train_splitting){print(i)
break()}
a <- 1
algo <- list()
for (i in train_splitting){
algo[[a]] <- ts(i[, "sales"], frequency=365, start=c(2013,1), end=c(2017,365))
print(a)
a <- a + 1
}
prediction <- sapply(algo, loquesea)
View(algo)
loquesea <- function(algo){
fit <- Arima(algo, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
prediction <- sapply(algo, loquesea)
algo
prediction <- lapply(algo, loquesea)
prediction <- sapply(algo, loquesea)
Arima(algo[[1]], order=c(0,0,1), seasonal = c(0,0,1))
algo[[1]]
HoltWinters(algo)
autoplot(algo[[1]])
loquesea <- function(algo){
fit <- arima(algo, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
loquesea <- function(algo){
fit <- arima(algo, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(algo, loquesea)
prediction
predictfunction <- function(ts){
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
a <- 1
ts_list <- list()
for (i in train_splitting){
ts_list[[a]] <- ts(i[, "sales"], frequency=365, start=c(2013,1), end=c(2017,365))
print(a)
a <- a + 1
}
prediction <- sapply(ts_list, predictfunction)
ts_list[[1]]
class(ts_list[[1]])
modelarima <- arima(train_days_ts, order=c(0,0,1), seasonal = c(0,0,1))
modelarima
library(forecast)
modelarima <- arima(train_days_ts, order=c(0,0,1), seasonal = c(0,0,1))
predictfunction <- function(ts){
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
predictfunction <- function(ts){
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
predictfunction <- function(ts){
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
predictfunction <- function(ts){
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(ts_list, predictfunction)
prediction
library(forecast)
modelarima <- Arima(train_days_ts, order=c(0,0,1), seasonal = c(0,0,1))
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1), xreg=fourier(y, K=4))
forecast <- forecast(fit,h=5)
forecast$mean[5]
predictfunction <- function(ts){
fit <- arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(ts_list, predictfunction)
prediction
ts_list[[1]]
HoltWinters(ts_list[[1]])
auto.arima(ts_list[[1]])
predictfunction <- function(ts){
fit <- Arima(ts, order=c(0,0,1), seasonal = c(0,0,1))
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
prediction <- sapply(ts_list, predictfunction)
predictfunction <- function(ts){
fit <- HoltWinters(ts)
forecast <- forecast(fit,h=5)
forecast$mean[5]
}
prediction <- sapply(ts_list, predictfunction)
fit <- HoltWinters(ts_list[[1]])
forecast <- forecast(fit,h=90)
forecast
forecast$mean
#split ####
i<-1
predictfunction <- function(ts){
fit <- HoltWinters(ts)
forecast <- forecast(fit,h=90)
print(i)
i <<- i + 1
forecast$mean
}
prediction <- sapply(ts_list, predictfunction)
warnings
i<-1
predictfunction <- function(ts){
fit <- HoltWinters(ts)
forecast <- forecast(fit,h=90)
print(i)
i <<- i + 1
forecast$mean
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(ts_list, predictfunction)
prediction
a <- 1
ts_list <- list()
prediction <- write_csv("C:/Respaldo FR/DD/predictions.csv")
write_csv(predictions,'C:/Respaldo FR/DD/predictions.csv')
write_csv(prediction,'C:/Respaldo FR/DD/predictions.csv')
write_csv(prediction,'C:/Respaldo FR/DD/predictions.csv')
write_csv(prediction,"C:/Respaldo FR/DD/predictions.csv" , nrow=FALSE)
write.csv(prediction,"C:/Respaldo FR/DD/predictions.csv" , nrow=FALSE)
write.csv(prediction,"C:/Respaldo FR/DD/predictions.csv")
View(prediction)
predictfunction <- function(ts){
fit <- HoltWinters(ts)
forecast <- forecast(fit,h=90)
print(i)
i <<- i + 1
forecast$mean
}
prediction <- sapply(ts_list, predictfunction)
i<-1
predictfunction <- function(ts){
fit <- HoltWinters(ts)
forecast <- forecast(fit,h=90)
print(i)
i <<- i + 1
forecast$mean
}
prediction <- sapply(ts_list, predictfunction)
prediction
i<-1
predictfunction <- function(ts){
fit <- HoltWinters(ts)
forecast <- forecast(fit,h=90)
print(i)
i <<- i + 1
forecast$mean
}
split <- c("store", "item")
train_splitting <- split(train, train[,split])
prediction <- sapply(ts_list, predictfunction)
prediction
a <- 1
ts_list <- list()
for (i in train_splitting){
ts_list[[a]] <- ts(i[, "sales"], frequency=365, start=c(2013,1), end=c(2017,365))
print(a)
a <- a + 1
}
prediction <- sapply(ts_list, predictfunction)
View(prediction)
View(train)
View(train_splitting)
as.numeric(prediction)
sample_submission <- read_csv("C:/Respaldo FR/DD/sample_submission.csv")
View(sample_submission)
head(sub1)
head(sample_submission)
sample_submission$sales <- prediction_vector
prediction_vector <- as.numeric(prediction)
sample_submission$sales <- prediction_vector
head(sample_submission)
write.csv(sample_submission,"C:/Respaldo FR/DD/predictions.csv")
write.csv(sample_submission,"C:/Respaldo FR/DD/predictions.csv")
sub1 <- sample_submission
head(sub1)
write.csv(sub1,"C:/Respaldo FR/DD/sub1.csv")
View(train_splitting)
source('C:/Respaldo FR/UBIQUM/iot2/IOT2.R')
library(tidyverse)  #Package for tidying data
library(lubridate)  #For working with dates/times of a time series
library(VIM)        #Visualizing and imputing missing values
library(Hmisc)      #for descriptive statistics
library(forecast)   #forcasting package
library(kableExtra) #fancy table generator
library(broom)      #Tidy statistical summary output
library(knitr)      #report generatioN
pacman:: p_load(caret, party, reshape, TTR, ggplot2, dplyr, DBI,RMySQL,dplyr,tidyr,lubridate, ggplot2, caret,ploty, forecast)
con = dbConnect(MySQL(), user='deepAnalytics', password='Sqltask1234!', dbname='dataanalytics2018', host='data-analytics-2018.cbrosir2cswx.us-east-1.rds.amazonaws.com')
weather_2007 <- readRDS("C:/Respaldo FR/UBIQUM/iot2/year2007_weather.RDS")
weather_2008 <- readRDS("C:/Respaldo FR/UBIQUM/iot2/year2008_weather.RDS")
weather_2009 <- readRDS("C:/Users/fabi_/Downloads/year2009_weather.RDS")
View(algo)
View(forecast)
View(fit)
View(item1)
View(store1)
View(train_daily)
View(store1)
View(predictionsforecast1)
library("readr")
iris <- read.csv("C:\\Respaldo FR\\UBIQUM\\Getting_Start with_R\\Data\\iris.csv")
attributes(iris)
cars <- read.csv("C:\\Respaldo FR\\UBIQUM\\Getting_Start with_R\\Data\\cars.csv")
# Remove outliers ####
OutlierDataSet <- carsds
# Remove outliers ####
OutlierDataSet <- carsds
# Remove outliers ####
OutlierDataSet <- cars
OutlierColumn <- cars$distance.of.car
cars <- OutlierDataSet[OutlierColumn > (quantile(OutlierColumn)[[2]] - 1.5*IQR(OutlierColumn)),]
library("readr")
cars <- read.csv("C:\\Respaldo FR\\UBIQUM\\Getting_Start with_R\\Data\\cars.csv")
# Remove outliers ####
OutlierDataSet <- cars
OutlierColumn <- cars$distance.of.car
cars <- OutlierDataSet[OutlierColumn > (quantile(OutlierColumn)[[2]] - 1.5*IQR(OutlierColumn)),]
cars <- OutlierDataSet[OutlierColumn < (quantile(OutlierColumn)[[4]] + 1.5*IQR(OutlierColumn)),]
# Define training and testing sets ####
set.seed(123)
trainSize <- round(nrow(carsds)*0.8)
testSize <- nrow(carsds)-trainSize
trainSize <- round(nrow(cars)*0.8)
testSize <- nrow(cars)-trainSize
training_indices <- sample(seq_len(nrow(cars)),size=trainSize)
trainSet <- cars[training_indices,]
testSet <- cars[-training_indices,]
# Get the linear regression model from the training set ####
Model_lm <- lm(distance.of.car ~ speed.of.car, trainSet)
summary(Model_lm)
# Predict the distances on the test set with the linear regression model ####
predictedDistance <- predict(Model_lm,testSet)
predictedDistance
# Exponential model
# Get the linear regression model from the training set ####
Model_lm <- lm(log(distance.of.car) ~ speed.of.car, trainSet)
summary(coolModel)
# Predict the distances on the test set with the linear regression model ####
predictedDistance <- exp(predict(Model_lm,testSet))
predictedDistance
# Quadratic model
# Get the linear regression model from the training set ####
Model_lm <- lm(sqrt(distance.of.car) ~ speed.of.car, trainSet)
summary(Model_Lm)
summary(Model_lm)
# Predict the distances on the test set with the linear regression model ####
predictedDistance <- predict(Model_lm,testSet)^2
predictedDistance
# Plot the linear regression, the predicted distances, and the observed distances ####
plot(testSet$speed.of.car,predictedDistance, col='red', type='line',xlab='Speed of car', ylab = 'Distance of car', main = 'Car distance predictions based on speed')
points(testSet$speed.of.car,predictedDistance, col='black')
points(testSet$speed.of.car,testSet$distance.of.car,col='green')
legend("topleft", legend=c("Linear Regression", "Predicted Distances","Observed Distances"),
col=c("red", "black","green"), lty=c(1,NA,NA),pch=c(NA,'o','o'))
plot(testSet$speed.of.car,predictedDistance, col='red', type='line',xlab='Speed of car', ylab = 'Distance of car', main = 'Car distance predictions based on speed')
points(testSet$speed.of.car,predictedDistance, col='black')
points(testSet$speed.of.car,testSet$distance.of.car,col='green')
legend("topleft", legend=c("Linear Regression", "Predicted Distances","Observed Distances"),
col=c("pink", "light_blue","blue"), lty=c(1,NA,NA),pch=c(NA,'o','o'))
plot(testSet$speed.of.car,predictedDistance, col='red', type='line',xlab='Speed of car', ylab = 'Distance of car', main = 'Car distance predictions based on speed')
points(testSet$speed.of.car,predictedDistance, col='black')
points(testSet$speed.of.car,testSet$distance.of.car,col='green')
legend("topleft", legend=c("Linear Regression", "Predicted Distances","Observed Distances"),
col=c("pink", "purple","blue"), lty=c(1,NA,NA),pch=c(NA,'o','o'))
errors <- predictedDistance - testSet$distance.of.car
errors
length(errors)
RMSE <- sqrt(mean(errors^2))
RMSE
MAE <-  mean(abs(errors))
MAE
MAPE <- mean(abs(errors/testSet$distance.of.car))
MAPE
# Plot the errors ####
plot(testSet$speed.of.car, errors, xlab = 'Car speed', ylab = 'Prediction error', main = 'Errors in the predictions', col= "blue")
abline(0,0)
legend("topleft", legend=c("Errors"),
col=c("blue"), pch=c('o'))
hist(errors, xlab = 'Error', ylab = 'Density', main = 'Distribution of errors in the predictions')
library("readr")
iris <- read.csv("C:\\Respaldo FR\\UBIQUM\\Getting_Start with_R\\Data\\iris.csv")
#Exploring the Data
attributes(iris)
summary(iris)
str(iris)
names(iris)
iris$Species<- as.numeric(iris$Species)
hist(iris$Species)
plot(iris$Sepal.Length,iris$Species)
qqnorm(iris$Sepal.Length)
qqnorm(iris$Petal.Width)
boxplot(iris$Sepal.Length)
boxplot(iris$Petal.Width)
attributes(iris)
# Exploring the Data ###
#Exploring the Data ####
attributes(iris)
# Define training and testing sets ####
options(digits = 3)
set.seed(123)
trainSize<-round(nrow(iris)*0.80)
testSize<-nrow(iris)-trainSize
trainSize
testSize
training_indices<-sample(seq_len(nrow(iris)),size =trainSize)
trainSet<-iris[training_indices,]
testSet<-iris[-training_indices,]
source('~/.active-rstudio-document', echo=TRUE)
# Predicting linear regression model from the training set ####
LinearModeliris<- lm(Petal.Length ~ Petal.Width, trainSet)
summary(LinearModeliris)
# Predict the lengths on the test set with the linear regression model ####
predictions<-predict(LinearModeliris,testSet)
predictions
boxplot.stats(LinearModeliris)
library(readr)
boxplot.stats(LinearModeliris)
plot(testSet$Petal.Width,predictions, col='red', type='line',xlab='Petal Width', ylab = 'Petal Length', main = 'Petal Length Predictions based on Petal Width')
points(testSet$Petal.Width,predictions, col='black')
points(testSet$Petal.Width,testSet$Petal.Length,col='green')
legend("topleft", legend=c("Linear Regression", "Predicted Lengths","Observed Lengths"),
col=c("red", "black","green"), lty=c(1,NA,NA),pch=c(NA,'o','o'))
# Calculate the errors ####
errors <- predictions - testSet$Petal.Length
errors
length(errors)
RMSE <- sqrt(mean(errors^2))
RMSE
MAE <-  mean(abs(errors))
MAE
MAPE <- mean(abs(errors/testSet$Petal.Length))
MAPE
plot(testSet$Petal.Width, errors, xlab = 'Petal Width', ylab = 'Prediction error', main = 'Errors in the predictions', col= "blue")
abline(0,0)
legend("topleft", legend=c("Errors"),
col=c("blue"), pch=c('o'))
hist(errors, xlab = 'Error', ylab = 'Density', main = 'Distribution of errors in the predictions')
boxplot(IrisDataset[,!colnames(IrisDataset)=='X'])
plot(testSet$Petal.Width, errors, xlab = 'Petal Width', ylab = 'Prediction error', main = 'Errors in the predictions', col= "blue")
abline(0,0)
legend("topleft", legend=c("Errors"),
col=c("blue"), pch=c('o'))
hist(errors, xlab = 'Error', ylab = 'Density', main = 'Distribution of errors in the predictions')
boxplot(iris[,!colnames(IrisDataset)=='X'])
plot(testSet$Petal.Width, errors, xlab = 'Petal Width', ylab = 'Prediction error', main = 'Errors in the predictions', col= "blue")
abline(0,0)
legend("topleft", legend=c("Errors"),
col=c("blue"), pch=c('o'))
hist(errors, xlab = 'Error', ylab = 'Density', main = 'Distribution of errors in the predictions')
boxplot(iris[,!colnames(iris)=='X'])
iris <- read.csv("C:\\Respaldo FR\\UBIQUM\\Proyectos \\PROJECT3\\iris.csv")
iris <- read.csv("C:\\Respaldo FR\\UBIQUM\\Proyectos\\PROJECT3\\iris.csv")
iris <- read.csv("C:\\Respaldo FR\\UBIQUM\\Proyectos\\Getting_start_with_R\\Data\\iris.csv")
library("readr")
